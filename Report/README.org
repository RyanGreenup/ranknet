#+TITLE: Readme

#+BEGIN_SRC
latexmk -interaction=nonstopmode -shell-escape -xelatex 
latexmk -c
#+END_SRC

To Build this document:

1. Make sure that ~../resources/references.bib~ exists
2. Make sure ~org-mode~ is using listings
   a. For the outline we were using ~minted~ but I decided to go back to listings, we can swap either way it doesn't really matter, ~minted~ requires ~-shell-escape~ so it may be finicky on things like MacOS.
      #+begin_src elisp
      ;;;;; LaTeX use minted package with python pygments
      ;(setq org-latex-listings 'minted
      ;      org-latex-packages-alist '(("" "minted"))
      ;      org-latex-pdf-process
      ;      '("xelatex -shell-escape -synctex=1 -interaction nonstopmode -output-directory %o %f"
      ;        "xelatex -shell-escape -synctex=1 -interaction nonstopmode -output-directory %o %f"))
      ;;;;; LaTeX use listings package
      (setq org-latex-listings 'listings
            org-latex-packages-alist '(("" "listings"))
            org-latex-pdf-process
            '("xelatex -shell-escape -synctex=1 -interaction nonstopmode -output-directory %o %f"
              "xelatex -shell-escape -synctex=1 -interaction nonstopmode -output-directory %o %f"))
      #+end_src
3. Make sure that [[https://github.com/jkitchin/org-ref][org-ref]] is set up and installed
4. Export from Emacs to HTML with ~org-export-dispatch~ (~C-c C-e l l~)
5. in the shell run the following:

   #+begin_src bash
   # pdflatex -interaction=nonstopmode -shell-escape Report.tex
   # Shell escape is required for SVG Files
   xelatex -interaction=nonstopmode -shell-escape Report.tex
   biber Report.bcf
   xelatex -interaction=nonstopmode Report.tex
   # Clean up Fluff
   latexmk -c
   #+end_src
6. The PDF should be working now
7. TODO To Build the HTML, something like this (if the below scripts are in PATH):

   #+begin_src bash
    # Standard CSL
    pandoc input.tex -s --standalone -t html -c style.css  --bibliography=resources/references.bib  -o out.html

    # untested in this context with Tikz Lua
    pandoc input.tex --lua-filter ~/bin/tikz.lua -s --standalone -t html -c style.css  --bibliography=resources/references.bib  -o out.html


    # Better CSL
    pandoc CaseStudyAssessment.tex --lua-filter ~/bin/tikz.lua -s --standalone -t html -c /home/dor/Templates/CSS/Org-CSS/Killercup.css --csl=resources/nature.csl  --bibliography=resources/references.bib  -o /tmp/o.html
    pandoc /tmp/o.html -t dokuwiki -s --standalone | xclip -selection clipboard
    #+end_src

** Installing Org-Ref
I used something like this in my ~init.el~

#+begin_src elisp
;;;; org-ref
(setq reftex-default-bibliography '("~/Dropbox/Studies/Papers/references.bib"))

;; see org-ref for use of these variables
(setq org-ref-bibliography-notes "~/Dropbox/Studies/Papers/notes.org"
      org-ref-default-bibliography '("~/Dropbox/Studies/Papers/references.bib")
      org-ref-pdf-directory "~/Dropbox/Studies/Papers/PDFS")
;;;;; citeproc for references in HTMl
(use-package! citeproc-org
  :load-path "~/DotFiles/Spacemacs/Downloads/citeproc-org-0.2.2"
  ;; :config
    ;;  configure your package here
  )

(defun citeproc-org-setup ()
  "Add citeproc-org rendering to the `org-export-before-parsing-hook' hook."
  (interactive)
  (add-hook 'org-export-before-parsing-hook 'citeproc-org-render-references))
(defun citeproc-off ()
  "remove citeproc-org rendering from the `org-export-before-parsing-hook' hook."
  (interactive)
  (remove-hook 'org-export-before-parsing-hook 'citeproc-org-render-references))

(citeproc-org-setup)
#+end_src

Worst case, export to \LaTeX and use some clever ~sed~ to swap ~cite:~ for ~\cite{}~.

I used to have HTML export working but not recently, it's an issue with HTML only working for ~BibTeX~ standards or something weird.

*** Converting to HTML
What does work is going to LaTeX and then going to HTML with pandoc, to get a better referencing style you can (somehow I forget) specify a custom CSL file, I liked ~nature.csl~ which I customised to have ~[]~ brackets, if there's tikz pictures here are two scripts I use to also extract them

**** LaTeX to HTML
#+begin_src bash
#!/bin/bash

# Include a help statment
if [ "$1" == "-h" ]; then
  echo "Usage: `basename $0` <TeX> <CSS> "
  echo "Merge tikz-SVG: `basename $0` <TeX> <CSS> -std"
  echo "Use Mathml: `basename $0` <TeX> <CSS> -std --mathml"
  exit 0
fi


# Test to see if required packages are installed
command -v pdf2svg >/dev/null 2>&1 || { echo >&2 "I require pdf2svg but it's not
installed. If you're on Ubuntu or Arch it should be in the repos so try
something like sudo apt install pdf2svg or sudo pacman -Syu pdf2svg or whatever.  Aborting."; exit 1; }

# As for variables only if not specified
if [[ "$1" != *".tex" ]]; then
    echo "Please Give me a *.TeX file, You can't drag and drop,
            Probably just restart and feed as an argument where:
            t2h TeX CSS"
    read -p 'Filename: ' texfile
    echo "Please give me a CSS Stylesheet"
    read -p 'Filename: ' stylesheet
else
    texfile=$1
    stylesheet=$2
fi




# Make the name the file name before the extension
name=$(echo "$texfile" |cut -f 1 -d '.')
nameout=$name".html"

#Perform pandoc
  #This doesnt work with tikz
    #pandoc -s --mathjax --toc -c $stylesheet $texfile -o $nameout

#This does work with tikz

if [[ "$*" == *--mathml* ]]
then
    pandoc --mathml --from latex+raw_tex --toc -c $stylesheet --lua-filter ~/bin/tikz.lua -s $texfile -o $nameout
else
    pandoc --mathjax --from latex+raw_tex --toc -c $stylesheet --lua-filter ~/bin/tikz.lua -s $texfile -o $nameout
    #The lua script was taken from https://pandoc.org/lua-filters.html#building-images-with-tikz
fi


if [ "$3" == "-std" ]; then
  svgMerge $nameout
fi

#Merge in the Stylesheet
htmerge $nameout $stylesheet

#+end_src

**** Extract TiKz
I didn't write this ~lua~ script, it's referenced in the pandoc manual, seems to work quite well though.

#+begin_src lua
local function tikz2image(src, filetype, outfile)
    local tmp = os.tmpname()
    local tmpdir = string.match(tmp, "^(.*[\\/])") or "."
    local f = io.open(tmp .. ".tex", 'w')
    f:write("\\documentclass{standalone}\n\\usepackage{xcolor}\n\\usepackage{tikz}\n\\begin{document}\n\\nopagecolor\n")
    f:write(src)
    f:write("\n\\end{document}\n")
    f:close()
    os.execute("pdflatex  -output-directory " .. tmpdir  .. " " .. tmp)
    if filetype == 'pdf' then
        os.rename(tmp .. ".pdf", outfile)
    else
        os.execute("pdf2svg " .. tmp .. ".pdf " .. outfile)
    end
    os.remove(tmp .. ".tex")
    os.remove(tmp .. ".pdf")
    os.remove(tmp .. ".log")
    os.remove(tmp .. ".aux")
end

extension_for = {
    html = 'svg',
    html4 = 'svg',
    html5 = 'svg',
    latex = 'pdf',
    beamer = 'pdf' }

local function file_exists(name)
    local f = io.open(name, 'r')
    if f ~= nil then
        io.close(f)
        return true
    else
        return false
    end
end

local function starts_with(start, str)
   return str:sub(1, #start) == start
end


function RawBlock(el)
    if starts_with("\\begin{tikzpicture}", el.text) then
        local filetype = extension_for[FORMAT] or "svg"
        local fname = pandoc.sha1(el.text) .. "." .. filetype
        if not file_exists(fname) then
            tikz2image(el.text, filetype, fname)
        end
        return pandoc.Para({pandoc.Image({}, fname)})
    else
       return el
    end
end

#+end_src
